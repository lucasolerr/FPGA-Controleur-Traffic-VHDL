-- Copyright (C) 2020  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.

-- Generated by Quartus Prime Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition
-- Created on Fri Oct 07 12:05:53 2022

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY fsm IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        compteur : IN STD_LOGIC := '0';
        rouge : IN STD_LOGIC := '0';
        vert : IN STD_LOGIC := '0';
        orange : IN STD_LOGIC := '0';
        maintenance : IN STD_LOGIC := '0';
        clignotant : IN STD_LOGIC := '0';
        r1 : OUT STD_LOGIC;
        o1 : OUT STD_LOGIC;
        v1 : OUT STD_LOGIC;
        r2 : OUT STD_LOGIC;
        o2 : OUT STD_LOGIC;
        v2 : OUT STD_LOGIC
    );
END fsm;

ARCHITECTURE BEHAVIOR OF fsm IS
    TYPE type_fstate IS (RV,RO,RR,VR,OrangeR,RougeR,OO2,OO1);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
BEGIN
    PROCESS (clock,reset,reg_fstate)
    BEGIN
        IF (reset='1') THEN
            fstate <= RV;
        ELSIF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,compteur,rouge,vert,orange,maintenance,clignotant)
    BEGIN
        r1 <= '0';
        o1 <= '0';
        v1 <= '0';
        r2 <= '0';
        o2 <= '0';
        v2 <= '0';
        CASE fstate IS
            WHEN RV =>
                IF ((maintenance = '1')) THEN
                    reg_fstate <= OO1;
                ELSIF (((compteur = vert) AND NOT((maintenance = '1')))) THEN
                    reg_fstate <= RO;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= RV;
                END IF;

                v2 <= '1';

                r1 <= '1';
            WHEN RO =>
                IF ((compteur = orange)) THEN
                    reg_fstate <= RR;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= RO;
                END IF;

                o2 <= '1';

                r1 <= '1';
            WHEN RR =>
                IF ((compteur = rouge)) THEN
                    reg_fstate <= VR;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= RR;
                END IF;

                r1 <= '1';

                r2 <= '1';
            WHEN VR =>
                IF ((compteur = vert)) THEN
                    reg_fstate <= OrangeR;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= VR;
                END IF;

                v1 <= '1';

                r2 <= '1';
            WHEN OrangeR =>
                IF ((compteur = orange)) THEN
                    reg_fstate <= RougeR;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= OrangeR;
                END IF;

                o1 <= '1';

                r2 <= '1';
            WHEN RougeR =>
                IF ((compteur = rouge)) THEN
                    reg_fstate <= RV;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= RougeR;
                END IF;

                r1 <= '1';

                r2 <= '1';
            WHEN OO2 =>
                IF ((compteur = clignotant)) THEN
                    reg_fstate <= OO1;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= OO2;
                END IF;
            WHEN OO1 =>
                IF (NOT((maintenance = '1'))) THEN
                    reg_fstate <= RV;
                ELSIF (((compteur = clignotant) AND (maintenance = '1'))) THEN
                    reg_fstate <= OO2;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= OO1;
                END IF;

                o1 <= '1';

                o2 <= '1';
            WHEN OTHERS => 
                r1 <= 'X';
                o1 <= 'X';
                v1 <= 'X';
                r2 <= 'X';
                o2 <= 'X';
                v2 <= 'X';
                report "Reach undefined state";
        END CASE;
    END PROCESS;
END BEHAVIOR;
